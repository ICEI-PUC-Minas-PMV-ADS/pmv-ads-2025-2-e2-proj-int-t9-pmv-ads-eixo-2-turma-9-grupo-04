@model CriarGrupo.Models.Grupo

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h1>Criar Grupo </h1>
</br>

<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Nome" class="control-label"></label>
                <input asp-for="Nome" class="form-control" />
                <span asp-validation-for="Nome" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Descricao" class="control-label"></label>
                <textarea asp-for="Descricao" class="form-control" rows="4"></textarea>
                <span asp-validation-for="Descricao" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="NumeroMaximoParticipantes" class="control-label"></label>
                <input asp-for="NumeroMaximoParticipantes" class="form-control" />
                <span asp-validation-for="NumeroMaximoParticipantes" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="ListaEspera" class="control-label"></label>
                <select asp-for="ListaEspera" class="form-control">
                    <option value="" selected disabled>Selecione uma opção</option>
                    <option value="true">Sim</option>
                    <option value="false">Não</option>
                </select>
                <span asp-validation-for="ListaEspera" class="text-danger"></span>
            </div>
                     
            <div class="form-group">
                <label asp-for="Modalidade" class="control-label"></label>
                <input asp-for="Modalidade" class="form-control" />
                <span asp-validation-for="Modalidade" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Estado" class="control-label"></label>
                <input asp-for="Estado" class="form-control" list="lista-estados" />
                <datalist id="lista-estados"></datalist>
                <span asp-validation-for="Estado" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Cidade" class="control-label"></label>
                <input asp-for="Cidade" class="form-control" list="lista-cidades" />
                <datalist id="lista-cidades"></datalist>
                <span asp-validation-for="Cidade" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Salvar" class="btn btn-primary" />
                <a asp-action="Index" class="btn btn-danger"> Cancelar</a>
            </div>
        </form>
    </div>
</div>

<style>
    .form-control {
        border-radius: 10px; 
    }

    .btn {
        border-radius: 6px;
    }

    .form-group {
        margin-bottom: 15px; 
    }

    h1 {
        font-size: 30px;
        margin-top:30px;
    }
</style>

<script>
    (function () {
      const inputEstado = document.getElementById("Estado");
      const inputCidade = document.getElementById("Cidade");
      const dlEstados = document.getElementById("lista-estados");
      const dlCidades = document.getElementById("lista-cidades");

     
      let mapaNomeParaId = {};

      
      fetch("https://servicodados.ibge.gov.br/api/v1/localidades/estados")
        .then(r => r.json())
        .then(estados => {
          
          estados.sort((a, b) => a.nome.localeCompare(b.nome));

          dlEstados.innerHTML = ""; 

          estados.forEach(uf => {
           
            mapaNomeParaId[uf.nome] = uf.id;

            const opt = document.createElement("option");
            opt.value = uf.nome; 
            dlEstados.appendChild(opt);
          });

         
          if (inputEstado.value && mapaNomeParaId[inputEstado.value]) {
            carregarCidades(inputEstado.value);
          }
        })
        .catch(err => console.error("Erro ao carregar estados:", err));

      
      inputEstado.addEventListener("change", () => {
        const nomeEstado = (inputEstado.value || "").trim();
        inputCidade.value = "";
        dlCidades.innerHTML = "";

        if (!mapaNomeParaId[nomeEstado]) return;

        carregarCidades(nomeEstado);
      });

      
      function carregarCidades(nomeEstado) {
        const idUf = mapaNomeParaId[nomeEstado];
        if (!idUf) return;

        const url = `https://servicodados.ibge.gov.br/api/v1/localidades/estados/${idUf}/municipios?orderBy=nome`;

        fetch(url)
          .then(r => r.json())
          .then(municipios => {
            dlCidades.innerHTML = "";
            municipios.forEach(m => {
              const opt = document.createElement("option");
              opt.value = m.nome;
              dlCidades.appendChild(opt);
            });
          })
          .catch(err => console.error("Erro ao carregar cidades:", err));
      }
    })();
</script>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
