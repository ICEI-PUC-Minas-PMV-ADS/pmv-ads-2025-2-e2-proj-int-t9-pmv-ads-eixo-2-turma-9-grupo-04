@model CriarGrupo.Models.Grupo

@{
    ViewData["Title"] = "Edit";
}

<h1>Editar Grupo</h1>


<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Nome" class="control-label"></label>
                <input asp-for="Nome" class="form-control" />
                <span asp-validation-for="Nome" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Descricao" class="control-label"></label>
                <input asp-for="Descricao" class="form-control" />
                <span asp-validation-for="Descricao" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="NumeroMaximoParticipantes" class="control-label"></label>
                <input asp-for="NumeroMaximoParticipantes" class="form-control" />
                <span asp-validation-for="NumeroMaximoParticipantes" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="ListaEspera" class="control-label"></label>
                <select asp-for="ListaEspera" class="form-control">
                    <option value="" selected disabled>Selecione uma opção</option>
                    <option value="true">Sim</option>
                    <option value="false">Não</option>
                </select>
                <span asp-validation-for="ListaEspera" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Modalidade" class="control-label"></label>
                <input asp-for="Modalidade" class="form-control" />
                <span asp-validation-for="Modalidade" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Estado" class="control-label"></label>
                <input asp-for="Estado" class="form-control" list="lista-estados" autocomplete="off" />
                <datalist id="lista-estados"></datalist>
                <span asp-validation-for="Estado" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Cidade" class="control-label"></label>
                <input asp-for="Cidade" class="form-control" list="lista-cidades" autocomplete="off" />
                <datalist id="lista-cidades"></datalist>
                <span asp-validation-for="Cidade" class="text-danger"></span>
            </div>


            <div class="form-group">
                <input type="submit" value="Salvar" class="btn btn-primary" />
                <a asp-action="Index" class="btn btn-danger"> Cancelar</a>
            </div>
        </form>
    </div>
</div>



<style>
   h1 {
        font-size: 30px;
        margin-top: 30px;
        margin-bottom: 30px;
    }

    .form-control {
        border-radius: 10px;
    }

    .btn {
        border-radius: 6px;
    }

    .form-group {
        margin-bottom: 15px;
    }

</style>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener("DOMContentLoaded", function () {
          const inputEstado = document.getElementById("Estado");
          const inputCidade = document.getElementById("Cidade");
          const dlEstados   = document.getElementById("lista-estados");
          const dlCidades   = document.getElementById("lista-cidades");
          if (!inputEstado || !inputCidade || !dlEstados || !dlCidades) return;

          
          const norm = s => (s||"").toString()
            .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
            .trim().toUpperCase();

          const nomeUF_to_id   = Object.create(null); 
          const nomeUF_oficial = Object.create(null); 

          
          toggleCidade(false);

          
          fetch("https://servicodados.ibge.gov.br/api/v1/localidades/estados")
            .then(r => r.json())
            .then(estados => {
              estados.sort((a,b) => a.nome.localeCompare(b.nome));
              dlEstados.innerHTML = "";

              estados.forEach(uf => {
                const k = norm(uf.nome);
                nomeUF_to_id[k] = uf.id;
                nomeUF_oficial[k] = uf.nome;

                const opt = document.createElement("option");
                opt.value = uf.nome; 
                dlEstados.appendChild(opt);
              });

              
              const estadoAtual = inputEstado.value;
              const kAtual = norm(estadoAtual);
              if (estadoAtual && nomeUF_to_id[kAtual]) {
                carregarCidades(kAtual, /*tentarManterCidade=*/true);
              }
            });

          
          inputEstado.addEventListener("change", () => {
            const k = norm(inputEstado.value);
            limparCidades();
            if (!nomeUF_to_id[k]) {
              toggleCidade(false);
              return;
            }
            carregarCidades(k, /*tentarManterCidade=*/false);
          });

          function carregarCidades(kUF, tentarManterCidade) {
            const idUf = nomeUF_to_id[kUF];
            if (!idUf) return;

            toggleCidade(false);
            limparCidades();

            const url = `https://servicodados.ibge.gov.br/api/v1/localidades/estados/${idUf}/municipios?orderBy=nome`;
            fetch(url)
              .then(r => r.json())
              .then(municipios => {
                dlCidades.innerHTML = "";
                municipios.forEach(m => {
                  const opt = document.createElement("option");
                  opt.value = m.nome; 
                  dlCidades.appendChild(opt);
                });

                toggleCidade(true);

                if (tentarManterCidade) {
                  const cidadeAtual = (inputCidade.value || "").trim();
                  const existe = cidadeAtual && municipios.some(m => norm(m.nome) === norm(cidadeAtual));
                  if (!existe) inputCidade.value = ""; 
                } else {
                  inputCidade.value = ""; /
                }
              })
              .catch(() => toggleCidade(false));
          }

          function limparCidades() {
            inputCidade.value = "";
            dlCidades.innerHTML = "";
          }

          function toggleCidade(habilitar) {
            inputCidade.disabled = !habilitar;
            inputCidade.placeholder = habilitar ? "" : "Selecione o Estado primeiro";
          }
        });
    </script>
}
